// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Encedeus/pluginServer/ent/plugin"
	"github.com/Encedeus/pluginServer/ent/publication"
	"github.com/google/uuid"
)

// PublicationCreate is the builder for creating a Publication entity.
type PublicationCreate struct {
	config
	mutation *PublicationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PublicationCreate) SetCreatedAt(t time.Time) *PublicationCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableCreatedAt(t *time.Time) *PublicationCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetIsDeprecated sets the "is_deprecated" field.
func (pc *PublicationCreate) SetIsDeprecated(b bool) *PublicationCreate {
	pc.mutation.SetIsDeprecated(b)
	return pc
}

// SetNillableIsDeprecated sets the "is_deprecated" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableIsDeprecated(b *bool) *PublicationCreate {
	if b != nil {
		pc.SetIsDeprecated(*b)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PublicationCreate) SetName(s string) *PublicationCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetURIToFile sets the "uri_to_file" field.
func (pc *PublicationCreate) SetURIToFile(s string) *PublicationCreate {
	pc.mutation.SetURIToFile(s)
	return pc
}

// SetPluginID sets the "plugin_id" field.
func (pc *PublicationCreate) SetPluginID(u uuid.UUID) *PublicationCreate {
	pc.mutation.SetPluginID(u)
	return pc
}

// SetPlugin sets the "plugin" edge to the Plugin entity.
func (pc *PublicationCreate) SetPlugin(p *Plugin) *PublicationCreate {
	return pc.SetPluginID(p.ID)
}

// Mutation returns the PublicationMutation object of the builder.
func (pc *PublicationCreate) Mutation() *PublicationMutation {
	return pc.mutation
}

// Save creates the Publication in the database.
func (pc *PublicationCreate) Save(ctx context.Context) (*Publication, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PublicationCreate) SaveX(ctx context.Context) *Publication {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PublicationCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PublicationCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PublicationCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := publication.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.IsDeprecated(); !ok {
		v := publication.DefaultIsDeprecated
		pc.mutation.SetIsDeprecated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PublicationCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Publication.created_at"`)}
	}
	if _, ok := pc.mutation.IsDeprecated(); !ok {
		return &ValidationError{Name: "is_deprecated", err: errors.New(`ent: missing required field "Publication.is_deprecated"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Publication.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := publication.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Publication.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.URIToFile(); !ok {
		return &ValidationError{Name: "uri_to_file", err: errors.New(`ent: missing required field "Publication.uri_to_file"`)}
	}
	if _, ok := pc.mutation.PluginID(); !ok {
		return &ValidationError{Name: "plugin_id", err: errors.New(`ent: missing required field "Publication.plugin_id"`)}
	}
	if _, ok := pc.mutation.PluginID(); !ok {
		return &ValidationError{Name: "plugin", err: errors.New(`ent: missing required edge "Publication.plugin"`)}
	}
	return nil
}

func (pc *PublicationCreate) sqlSave(ctx context.Context) (*Publication, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PublicationCreate) createSpec() (*Publication, *sqlgraph.CreateSpec) {
	var (
		_node = &Publication{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(publication.Table, sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(publication.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.IsDeprecated(); ok {
		_spec.SetField(publication.FieldIsDeprecated, field.TypeBool, value)
		_node.IsDeprecated = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(publication.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.URIToFile(); ok {
		_spec.SetField(publication.FieldURIToFile, field.TypeString, value)
		_node.URIToFile = value
	}
	if nodes := pc.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publication.PluginTable,
			Columns: []string{publication.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plugin.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PluginID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PublicationCreateBulk is the builder for creating many Publication entities in bulk.
type PublicationCreateBulk struct {
	config
	err      error
	builders []*PublicationCreate
}

// Save creates the Publication entities in the database.
func (pcb *PublicationCreateBulk) Save(ctx context.Context) ([]*Publication, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Publication, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PublicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PublicationCreateBulk) SaveX(ctx context.Context) []*Publication {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PublicationCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PublicationCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
