// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Encedeus/pluginServer/ent/plugin"
	"github.com/Encedeus/pluginServer/ent/predicate"
	"github.com/Encedeus/pluginServer/ent/publication"
	"github.com/Encedeus/pluginServer/ent/source"
	"github.com/Encedeus/pluginServer/ent/user"
	"github.com/google/uuid"
)

// PluginUpdate is the builder for updating Plugin entities.
type PluginUpdate struct {
	config
	hooks    []Hook
	mutation *PluginMutation
}

// Where appends a list predicates to the PluginUpdate builder.
func (pu *PluginUpdate) Where(ps ...predicate.Plugin) *PluginUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PluginUpdate) SetName(s string) *PluginUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetOwnerID sets the "owner_id" field.
func (pu *PluginUpdate) SetOwnerID(u uuid.UUID) *PluginUpdate {
	pu.mutation.SetOwnerID(u)
	return pu
}

// SetSourceID sets the "source_id" field.
func (pu *PluginUpdate) SetSourceID(i int) *PluginUpdate {
	pu.mutation.SetSourceID(i)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PluginUpdate) SetCreatedAt(t time.Time) *PluginUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PluginUpdate) SetNillableCreatedAt(t *time.Time) *PluginUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetOwner sets the "owner" edge to the User entity.
func (pu *PluginUpdate) SetOwner(u *User) *PluginUpdate {
	return pu.SetOwnerID(u.ID)
}

// SetSource sets the "source" edge to the Source entity.
func (pu *PluginUpdate) SetSource(s *Source) *PluginUpdate {
	return pu.SetSourceID(s.ID)
}

// AddPublicationIDs adds the "publications" edge to the Publication entity by IDs.
func (pu *PluginUpdate) AddPublicationIDs(ids ...int) *PluginUpdate {
	pu.mutation.AddPublicationIDs(ids...)
	return pu
}

// AddPublications adds the "publications" edges to the Publication entity.
func (pu *PluginUpdate) AddPublications(p ...*Publication) *PluginUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPublicationIDs(ids...)
}

// Mutation returns the PluginMutation object of the builder.
func (pu *PluginUpdate) Mutation() *PluginMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (pu *PluginUpdate) ClearOwner() *PluginUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// ClearSource clears the "source" edge to the Source entity.
func (pu *PluginUpdate) ClearSource() *PluginUpdate {
	pu.mutation.ClearSource()
	return pu
}

// ClearPublications clears all "publications" edges to the Publication entity.
func (pu *PluginUpdate) ClearPublications() *PluginUpdate {
	pu.mutation.ClearPublications()
	return pu
}

// RemovePublicationIDs removes the "publications" edge to Publication entities by IDs.
func (pu *PluginUpdate) RemovePublicationIDs(ids ...int) *PluginUpdate {
	pu.mutation.RemovePublicationIDs(ids...)
	return pu
}

// RemovePublications removes "publications" edges to Publication entities.
func (pu *PluginUpdate) RemovePublications(p ...*Publication) *PluginUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePublicationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PluginUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PluginUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PluginUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PluginUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PluginUpdate) check() error {
	if _, ok := pu.mutation.OwnerID(); pu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Plugin.owner"`)
	}
	if _, ok := pu.mutation.SourceID(); pu.mutation.SourceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Plugin.source"`)
	}
	return nil
}

func (pu *PluginUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(plugin.Table, plugin.Columns, sqlgraph.NewFieldSpec(plugin.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(plugin.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(plugin.FieldCreatedAt, field.TypeTime, value)
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plugin.OwnerTable,
			Columns: []string{plugin.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plugin.OwnerTable,
			Columns: []string{plugin.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plugin.SourceTable,
			Columns: []string{plugin.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plugin.SourceTable,
			Columns: []string{plugin.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PublicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plugin.PublicationsTable,
			Columns: []string{plugin.PublicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPublicationsIDs(); len(nodes) > 0 && !pu.mutation.PublicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plugin.PublicationsTable,
			Columns: []string{plugin.PublicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PublicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plugin.PublicationsTable,
			Columns: []string{plugin.PublicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plugin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PluginUpdateOne is the builder for updating a single Plugin entity.
type PluginUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PluginMutation
}

// SetName sets the "name" field.
func (puo *PluginUpdateOne) SetName(s string) *PluginUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetOwnerID sets the "owner_id" field.
func (puo *PluginUpdateOne) SetOwnerID(u uuid.UUID) *PluginUpdateOne {
	puo.mutation.SetOwnerID(u)
	return puo
}

// SetSourceID sets the "source_id" field.
func (puo *PluginUpdateOne) SetSourceID(i int) *PluginUpdateOne {
	puo.mutation.SetSourceID(i)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PluginUpdateOne) SetCreatedAt(t time.Time) *PluginUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PluginUpdateOne) SetNillableCreatedAt(t *time.Time) *PluginUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetOwner sets the "owner" edge to the User entity.
func (puo *PluginUpdateOne) SetOwner(u *User) *PluginUpdateOne {
	return puo.SetOwnerID(u.ID)
}

// SetSource sets the "source" edge to the Source entity.
func (puo *PluginUpdateOne) SetSource(s *Source) *PluginUpdateOne {
	return puo.SetSourceID(s.ID)
}

// AddPublicationIDs adds the "publications" edge to the Publication entity by IDs.
func (puo *PluginUpdateOne) AddPublicationIDs(ids ...int) *PluginUpdateOne {
	puo.mutation.AddPublicationIDs(ids...)
	return puo
}

// AddPublications adds the "publications" edges to the Publication entity.
func (puo *PluginUpdateOne) AddPublications(p ...*Publication) *PluginUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPublicationIDs(ids...)
}

// Mutation returns the PluginMutation object of the builder.
func (puo *PluginUpdateOne) Mutation() *PluginMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (puo *PluginUpdateOne) ClearOwner() *PluginUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// ClearSource clears the "source" edge to the Source entity.
func (puo *PluginUpdateOne) ClearSource() *PluginUpdateOne {
	puo.mutation.ClearSource()
	return puo
}

// ClearPublications clears all "publications" edges to the Publication entity.
func (puo *PluginUpdateOne) ClearPublications() *PluginUpdateOne {
	puo.mutation.ClearPublications()
	return puo
}

// RemovePublicationIDs removes the "publications" edge to Publication entities by IDs.
func (puo *PluginUpdateOne) RemovePublicationIDs(ids ...int) *PluginUpdateOne {
	puo.mutation.RemovePublicationIDs(ids...)
	return puo
}

// RemovePublications removes "publications" edges to Publication entities.
func (puo *PluginUpdateOne) RemovePublications(p ...*Publication) *PluginUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePublicationIDs(ids...)
}

// Where appends a list predicates to the PluginUpdate builder.
func (puo *PluginUpdateOne) Where(ps ...predicate.Plugin) *PluginUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PluginUpdateOne) Select(field string, fields ...string) *PluginUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plugin entity.
func (puo *PluginUpdateOne) Save(ctx context.Context) (*Plugin, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PluginUpdateOne) SaveX(ctx context.Context) *Plugin {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PluginUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PluginUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PluginUpdateOne) check() error {
	if _, ok := puo.mutation.OwnerID(); puo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Plugin.owner"`)
	}
	if _, ok := puo.mutation.SourceID(); puo.mutation.SourceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Plugin.source"`)
	}
	return nil
}

func (puo *PluginUpdateOne) sqlSave(ctx context.Context) (_node *Plugin, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(plugin.Table, plugin.Columns, sqlgraph.NewFieldSpec(plugin.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Plugin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plugin.FieldID)
		for _, f := range fields {
			if !plugin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plugin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(plugin.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(plugin.FieldCreatedAt, field.TypeTime, value)
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plugin.OwnerTable,
			Columns: []string{plugin.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plugin.OwnerTable,
			Columns: []string{plugin.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plugin.SourceTable,
			Columns: []string{plugin.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plugin.SourceTable,
			Columns: []string{plugin.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PublicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plugin.PublicationsTable,
			Columns: []string{plugin.PublicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPublicationsIDs(); len(nodes) > 0 && !puo.mutation.PublicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plugin.PublicationsTable,
			Columns: []string{plugin.PublicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PublicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plugin.PublicationsTable,
			Columns: []string{plugin.PublicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Plugin{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plugin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
