// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Encedeus/pluginServer/ent/plugin"
	"github.com/Encedeus/pluginServer/ent/publication"
	"github.com/google/uuid"
)

// Publication is the model entity for the Publication schema.
type Publication struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// IsDeprecated holds the value of the "is_deprecated" field.
	IsDeprecated bool `json:"is_deprecated,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
	// URIToFile holds the value of the "uri_to_file" field.
	URIToFile string `json:"uri_to_file,omitempty"`
	// PluginID holds the value of the "plugin_id" field.
	PluginID uuid.UUID `json:"plugin_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PublicationQuery when eager-loading is set.
	Edges        PublicationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PublicationEdges holds the relations/edges for other nodes in the graph.
type PublicationEdges struct {
	// Plugin holds the value of the plugin edge.
	Plugin *Plugin `json:"plugin,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PluginOrErr returns the Plugin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PublicationEdges) PluginOrErr() (*Plugin, error) {
	if e.loadedTypes[0] {
		if e.Plugin == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plugin.Label}
		}
		return e.Plugin, nil
	}
	return nil, &NotLoadedError{edge: "plugin"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Publication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case publication.FieldIsDeprecated:
			values[i] = new(sql.NullBool)
		case publication.FieldID:
			values[i] = new(sql.NullInt64)
		case publication.FieldName, publication.FieldTag, publication.FieldURIToFile:
			values[i] = new(sql.NullString)
		case publication.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case publication.FieldPluginID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Publication fields.
func (pu *Publication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case publication.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pu.ID = int(value.Int64)
		case publication.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pu.CreatedAt = value.Time
			}
		case publication.FieldIsDeprecated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deprecated", values[i])
			} else if value.Valid {
				pu.IsDeprecated = value.Bool
			}
		case publication.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pu.Name = value.String
			}
		case publication.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				pu.Tag = value.String
			}
		case publication.FieldURIToFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri_to_file", values[i])
			} else if value.Valid {
				pu.URIToFile = value.String
			}
		case publication.FieldPluginID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field plugin_id", values[i])
			} else if value != nil {
				pu.PluginID = *value
			}
		default:
			pu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Publication.
// This includes values selected through modifiers, order, etc.
func (pu *Publication) Value(name string) (ent.Value, error) {
	return pu.selectValues.Get(name)
}

// QueryPlugin queries the "plugin" edge of the Publication entity.
func (pu *Publication) QueryPlugin() *PluginQuery {
	return NewPublicationClient(pu.config).QueryPlugin(pu)
}

// Update returns a builder for updating this Publication.
// Note that you need to call Publication.Unwrap() before calling this method if this Publication
// was returned from a transaction, and the transaction was committed or rolled back.
func (pu *Publication) Update() *PublicationUpdateOne {
	return NewPublicationClient(pu.config).UpdateOne(pu)
}

// Unwrap unwraps the Publication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pu *Publication) Unwrap() *Publication {
	_tx, ok := pu.config.driver.(*txDriver)
	if !ok {
		panic("ent: Publication is not a transactional entity")
	}
	pu.config.driver = _tx.drv
	return pu
}

// String implements the fmt.Stringer.
func (pu *Publication) String() string {
	var builder strings.Builder
	builder.WriteString("Publication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_deprecated=")
	builder.WriteString(fmt.Sprintf("%v", pu.IsDeprecated))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pu.Name)
	builder.WriteString(", ")
	builder.WriteString("tag=")
	builder.WriteString(pu.Tag)
	builder.WriteString(", ")
	builder.WriteString("uri_to_file=")
	builder.WriteString(pu.URIToFile)
	builder.WriteString(", ")
	builder.WriteString("plugin_id=")
	builder.WriteString(fmt.Sprintf("%v", pu.PluginID))
	builder.WriteByte(')')
	return builder.String()
}

// Publications is a parsable slice of Publication.
type Publications []*Publication
