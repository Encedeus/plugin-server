// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Encedeus/pluginServer/ent/user"
	"github.com/Encedeus/pluginServer/ent/verificationsession"
	"github.com/google/uuid"
)

// VerificationSession is the model entity for the VerificationSession schema.
type VerificationSession struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VerificationSessionQuery when eager-loading is set.
	Edges        VerificationSessionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VerificationSessionEdges holds the relations/edges for other nodes in the graph.
type VerificationSessionEdges struct {
	// Session holds the value of the session edge.
	Session *User `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VerificationSessionEdges) SessionOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Session == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Session, nil
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VerificationSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case verificationsession.FieldID:
			values[i] = new(sql.NullString)
		case verificationsession.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VerificationSession fields.
func (vs *VerificationSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case verificationsession.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				vs.ID = value.String
			}
		case verificationsession.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				vs.UserID = *value
			}
		default:
			vs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VerificationSession.
// This includes values selected through modifiers, order, etc.
func (vs *VerificationSession) Value(name string) (ent.Value, error) {
	return vs.selectValues.Get(name)
}

// QuerySession queries the "session" edge of the VerificationSession entity.
func (vs *VerificationSession) QuerySession() *UserQuery {
	return NewVerificationSessionClient(vs.config).QuerySession(vs)
}

// Update returns a builder for updating this VerificationSession.
// Note that you need to call VerificationSession.Unwrap() before calling this method if this VerificationSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (vs *VerificationSession) Update() *VerificationSessionUpdateOne {
	return NewVerificationSessionClient(vs.config).UpdateOne(vs)
}

// Unwrap unwraps the VerificationSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vs *VerificationSession) Unwrap() *VerificationSession {
	_tx, ok := vs.config.driver.(*txDriver)
	if !ok {
		panic("ent: VerificationSession is not a transactional entity")
	}
	vs.config.driver = _tx.drv
	return vs
}

// String implements the fmt.Stringer.
func (vs *VerificationSession) String() string {
	var builder strings.Builder
	builder.WriteString("VerificationSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vs.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", vs.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// VerificationSessions is a parsable slice of VerificationSession.
type VerificationSessions []*VerificationSession
