// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Encedeus/pluginServer/ent/source"
)

// Source is the model entity for the Source schema.
type Source struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Repository holds the value of the "repository" field.
	Repository string `json:"repository,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SourceQuery when eager-loading is set.
	Edges        SourceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SourceEdges holds the relations/edges for other nodes in the graph.
type SourceEdges struct {
	// Plugin holds the value of the plugin edge.
	Plugin []*Plugin `json:"plugin,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PluginOrErr returns the Plugin value or an error if the edge
// was not loaded in eager-loading.
func (e SourceEdges) PluginOrErr() ([]*Plugin, error) {
	if e.loadedTypes[0] {
		return e.Plugin, nil
	}
	return nil, &NotLoadedError{edge: "plugin"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Source) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case source.FieldID:
			values[i] = new(sql.NullInt64)
		case source.FieldRepository:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Source fields.
func (s *Source) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case source.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case source.FieldRepository:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repository", values[i])
			} else if value.Valid {
				s.Repository = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Source.
// This includes values selected through modifiers, order, etc.
func (s *Source) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryPlugin queries the "plugin" edge of the Source entity.
func (s *Source) QueryPlugin() *PluginQuery {
	return NewSourceClient(s.config).QueryPlugin(s)
}

// Update returns a builder for updating this Source.
// Note that you need to call Source.Unwrap() before calling this method if this Source
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Source) Update() *SourceUpdateOne {
	return NewSourceClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Source entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Source) Unwrap() *Source {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Source is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Source) String() string {
	var builder strings.Builder
	builder.WriteString("Source(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("repository=")
	builder.WriteString(s.Repository)
	builder.WriteByte(')')
	return builder.String()
}

// Sources is a parsable slice of Source.
type Sources []*Source
