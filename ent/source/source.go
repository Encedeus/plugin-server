// Code generated by ent, DO NOT EDIT.

package source

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the source type in the database.
	Label = "source"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRepository holds the string denoting the repository field in the database.
	FieldRepository = "repository"
	// EdgePlugin holds the string denoting the plugin edge name in mutations.
	EdgePlugin = "plugin"
	// Table holds the table name of the source in the database.
	Table = "sources"
	// PluginTable is the table that holds the plugin relation/edge.
	PluginTable = "plugins"
	// PluginInverseTable is the table name for the Plugin entity.
	// It exists in this package in order to avoid circular dependency with the "plugin" package.
	PluginInverseTable = "plugins"
	// PluginColumn is the table column denoting the plugin relation/edge.
	PluginColumn = "source_id"
)

// Columns holds all SQL columns for source fields.
var Columns = []string{
	FieldID,
	FieldRepository,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Source queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRepository orders the results by the repository field.
func ByRepository(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepository, opts...).ToFunc()
}

// ByPluginCount orders the results by plugin count.
func ByPluginCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPluginStep(), opts...)
	}
}

// ByPlugin orders the results by plugin terms.
func ByPlugin(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPluginStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPluginStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PluginInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PluginTable, PluginColumn),
	)
}
