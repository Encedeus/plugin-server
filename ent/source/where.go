// Code generated by ent, DO NOT EDIT.

package source

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Encedeus/pluginServer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Source {
	return predicate.Source(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Source {
	return predicate.Source(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Source {
	return predicate.Source(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Source {
	return predicate.Source(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Source {
	return predicate.Source(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Source {
	return predicate.Source(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Source {
	return predicate.Source(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Source {
	return predicate.Source(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Source {
	return predicate.Source(sql.FieldLTE(FieldID, id))
}

// Repository applies equality check predicate on the "repository" field. It's identical to RepositoryEQ.
func Repository(v string) predicate.Source {
	return predicate.Source(sql.FieldEQ(FieldRepository, v))
}

// RepositoryEQ applies the EQ predicate on the "repository" field.
func RepositoryEQ(v string) predicate.Source {
	return predicate.Source(sql.FieldEQ(FieldRepository, v))
}

// RepositoryNEQ applies the NEQ predicate on the "repository" field.
func RepositoryNEQ(v string) predicate.Source {
	return predicate.Source(sql.FieldNEQ(FieldRepository, v))
}

// RepositoryIn applies the In predicate on the "repository" field.
func RepositoryIn(vs ...string) predicate.Source {
	return predicate.Source(sql.FieldIn(FieldRepository, vs...))
}

// RepositoryNotIn applies the NotIn predicate on the "repository" field.
func RepositoryNotIn(vs ...string) predicate.Source {
	return predicate.Source(sql.FieldNotIn(FieldRepository, vs...))
}

// RepositoryGT applies the GT predicate on the "repository" field.
func RepositoryGT(v string) predicate.Source {
	return predicate.Source(sql.FieldGT(FieldRepository, v))
}

// RepositoryGTE applies the GTE predicate on the "repository" field.
func RepositoryGTE(v string) predicate.Source {
	return predicate.Source(sql.FieldGTE(FieldRepository, v))
}

// RepositoryLT applies the LT predicate on the "repository" field.
func RepositoryLT(v string) predicate.Source {
	return predicate.Source(sql.FieldLT(FieldRepository, v))
}

// RepositoryLTE applies the LTE predicate on the "repository" field.
func RepositoryLTE(v string) predicate.Source {
	return predicate.Source(sql.FieldLTE(FieldRepository, v))
}

// RepositoryContains applies the Contains predicate on the "repository" field.
func RepositoryContains(v string) predicate.Source {
	return predicate.Source(sql.FieldContains(FieldRepository, v))
}

// RepositoryHasPrefix applies the HasPrefix predicate on the "repository" field.
func RepositoryHasPrefix(v string) predicate.Source {
	return predicate.Source(sql.FieldHasPrefix(FieldRepository, v))
}

// RepositoryHasSuffix applies the HasSuffix predicate on the "repository" field.
func RepositoryHasSuffix(v string) predicate.Source {
	return predicate.Source(sql.FieldHasSuffix(FieldRepository, v))
}

// RepositoryEqualFold applies the EqualFold predicate on the "repository" field.
func RepositoryEqualFold(v string) predicate.Source {
	return predicate.Source(sql.FieldEqualFold(FieldRepository, v))
}

// RepositoryContainsFold applies the ContainsFold predicate on the "repository" field.
func RepositoryContainsFold(v string) predicate.Source {
	return predicate.Source(sql.FieldContainsFold(FieldRepository, v))
}

// HasPlugin applies the HasEdge predicate on the "plugin" edge.
func HasPlugin() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PluginTable, PluginColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPluginWith applies the HasEdge predicate on the "plugin" edge with a given conditions (other predicates).
func HasPluginWith(preds ...predicate.Plugin) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		step := newPluginStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Source) predicate.Source {
	return predicate.Source(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Source) predicate.Source {
	return predicate.Source(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Source) predicate.Source {
	return predicate.Source(sql.NotPredicates(p))
}
