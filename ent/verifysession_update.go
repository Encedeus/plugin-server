// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PluginServer/ent/predicate"
	"PluginServer/ent/verifysession"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// VerifySessionUpdate is the builder for updating VerifySession entities.
type VerifySessionUpdate struct {
	config
	hooks    []Hook
	mutation *VerifySessionMutation
}

// Where appends a list predicates to the VerifySessionUpdate builder.
func (vsu *VerifySessionUpdate) Where(ps ...predicate.VerifySession) *VerifySessionUpdate {
	vsu.mutation.Where(ps...)
	return vsu
}

// SetUserID sets the "user_id" field.
func (vsu *VerifySessionUpdate) SetUserID(u uuid.UUID) *VerifySessionUpdate {
	vsu.mutation.SetUserID(u)
	return vsu
}

// Mutation returns the VerifySessionMutation object of the builder.
func (vsu *VerifySessionUpdate) Mutation() *VerifySessionMutation {
	return vsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vsu *VerifySessionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vsu.sqlSave, vsu.mutation, vsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsu *VerifySessionUpdate) SaveX(ctx context.Context) int {
	affected, err := vsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vsu *VerifySessionUpdate) Exec(ctx context.Context) error {
	_, err := vsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsu *VerifySessionUpdate) ExecX(ctx context.Context) {
	if err := vsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vsu *VerifySessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(verifysession.Table, verifysession.Columns, sqlgraph.NewFieldSpec(verifysession.FieldID, field.TypeInt))
	if ps := vsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vsu.mutation.UserID(); ok {
		_spec.SetField(verifysession.FieldUserID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verifysession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vsu.mutation.done = true
	return n, nil
}

// VerifySessionUpdateOne is the builder for updating a single VerifySession entity.
type VerifySessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VerifySessionMutation
}

// SetUserID sets the "user_id" field.
func (vsuo *VerifySessionUpdateOne) SetUserID(u uuid.UUID) *VerifySessionUpdateOne {
	vsuo.mutation.SetUserID(u)
	return vsuo
}

// Mutation returns the VerifySessionMutation object of the builder.
func (vsuo *VerifySessionUpdateOne) Mutation() *VerifySessionMutation {
	return vsuo.mutation
}

// Where appends a list predicates to the VerifySessionUpdate builder.
func (vsuo *VerifySessionUpdateOne) Where(ps ...predicate.VerifySession) *VerifySessionUpdateOne {
	vsuo.mutation.Where(ps...)
	return vsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vsuo *VerifySessionUpdateOne) Select(field string, fields ...string) *VerifySessionUpdateOne {
	vsuo.fields = append([]string{field}, fields...)
	return vsuo
}

// Save executes the query and returns the updated VerifySession entity.
func (vsuo *VerifySessionUpdateOne) Save(ctx context.Context) (*VerifySession, error) {
	return withHooks(ctx, vsuo.sqlSave, vsuo.mutation, vsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsuo *VerifySessionUpdateOne) SaveX(ctx context.Context) *VerifySession {
	node, err := vsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vsuo *VerifySessionUpdateOne) Exec(ctx context.Context) error {
	_, err := vsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsuo *VerifySessionUpdateOne) ExecX(ctx context.Context) {
	if err := vsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vsuo *VerifySessionUpdateOne) sqlSave(ctx context.Context) (_node *VerifySession, err error) {
	_spec := sqlgraph.NewUpdateSpec(verifysession.Table, verifysession.Columns, sqlgraph.NewFieldSpec(verifysession.FieldID, field.TypeInt))
	id, ok := vsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VerifySession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, verifysession.FieldID)
		for _, f := range fields {
			if !verifysession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != verifysession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vsuo.mutation.UserID(); ok {
		_spec.SetField(verifysession.FieldUserID, field.TypeUUID, value)
	}
	_node = &VerifySession{config: vsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verifysession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vsuo.mutation.done = true
	return _node, nil
}
