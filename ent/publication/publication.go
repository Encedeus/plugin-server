// Code generated by ent, DO NOT EDIT.

package publication

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the publication type in the database.
	Label = "publication"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldIsDeprecated holds the string denoting the is_deprecated field in the database.
	FieldIsDeprecated = "is_deprecated"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldURIToFile holds the string denoting the uri_to_file field in the database.
	FieldURIToFile = "uri_to_file"
	// FieldPluginID holds the string denoting the plugin_id field in the database.
	FieldPluginID = "plugin_id"
	// EdgePlugin holds the string denoting the plugin edge name in mutations.
	EdgePlugin = "plugin"
	// Table holds the table name of the publication in the database.
	Table = "publications"
	// PluginTable is the table that holds the plugin relation/edge.
	PluginTable = "publications"
	// PluginInverseTable is the table name for the Plugin entity.
	// It exists in this package in order to avoid circular dependency with the "plugin" package.
	PluginInverseTable = "plugins"
	// PluginColumn is the table column denoting the plugin relation/edge.
	PluginColumn = "plugin_id"
)

// Columns holds all SQL columns for publication fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldIsDeprecated,
	FieldName,
	FieldURIToFile,
	FieldPluginID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultIsDeprecated holds the default value on creation for the "is_deprecated" field.
	DefaultIsDeprecated bool
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Publication queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByIsDeprecated orders the results by the is_deprecated field.
func ByIsDeprecated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeprecated, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByURIToFile orders the results by the uri_to_file field.
func ByURIToFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURIToFile, opts...).ToFunc()
}

// ByPluginID orders the results by the plugin_id field.
func ByPluginID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPluginID, opts...).ToFunc()
}

// ByPluginField orders the results by plugin field.
func ByPluginField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPluginStep(), sql.OrderByField(field, opts...))
	}
}
func newPluginStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PluginInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PluginTable, PluginColumn),
	)
}
