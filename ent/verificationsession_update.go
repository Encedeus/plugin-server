// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Encedeus/pluginServer/ent/predicate"
	"github.com/Encedeus/pluginServer/ent/user"
	"github.com/Encedeus/pluginServer/ent/verificationsession"
	"github.com/google/uuid"
)

// VerificationSessionUpdate is the builder for updating VerificationSession entities.
type VerificationSessionUpdate struct {
	config
	hooks    []Hook
	mutation *VerificationSessionMutation
}

// Where appends a list predicates to the VerificationSessionUpdate builder.
func (vsu *VerificationSessionUpdate) Where(ps ...predicate.VerificationSession) *VerificationSessionUpdate {
	vsu.mutation.Where(ps...)
	return vsu
}

// SetUserID sets the "user_id" field.
func (vsu *VerificationSessionUpdate) SetUserID(u uuid.UUID) *VerificationSessionUpdate {
	vsu.mutation.SetUserID(u)
	return vsu
}

// SetSessionID sets the "session" edge to the User entity by ID.
func (vsu *VerificationSessionUpdate) SetSessionID(id uuid.UUID) *VerificationSessionUpdate {
	vsu.mutation.SetSessionID(id)
	return vsu
}

// SetSession sets the "session" edge to the User entity.
func (vsu *VerificationSessionUpdate) SetSession(u *User) *VerificationSessionUpdate {
	return vsu.SetSessionID(u.ID)
}

// Mutation returns the VerificationSessionMutation object of the builder.
func (vsu *VerificationSessionUpdate) Mutation() *VerificationSessionMutation {
	return vsu.mutation
}

// ClearSession clears the "session" edge to the User entity.
func (vsu *VerificationSessionUpdate) ClearSession() *VerificationSessionUpdate {
	vsu.mutation.ClearSession()
	return vsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vsu *VerificationSessionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vsu.sqlSave, vsu.mutation, vsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsu *VerificationSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := vsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vsu *VerificationSessionUpdate) Exec(ctx context.Context) error {
	_, err := vsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsu *VerificationSessionUpdate) ExecX(ctx context.Context) {
	if err := vsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsu *VerificationSessionUpdate) check() error {
	if _, ok := vsu.mutation.SessionID(); vsu.mutation.SessionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VerificationSession.session"`)
	}
	return nil
}

func (vsu *VerificationSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(verificationsession.Table, verificationsession.Columns, sqlgraph.NewFieldSpec(verificationsession.FieldID, field.TypeString))
	if ps := vsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vsu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   verificationsession.SessionTable,
			Columns: []string{verificationsession.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vsu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   verificationsession.SessionTable,
			Columns: []string{verificationsession.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verificationsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vsu.mutation.done = true
	return n, nil
}

// VerificationSessionUpdateOne is the builder for updating a single VerificationSession entity.
type VerificationSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VerificationSessionMutation
}

// SetUserID sets the "user_id" field.
func (vsuo *VerificationSessionUpdateOne) SetUserID(u uuid.UUID) *VerificationSessionUpdateOne {
	vsuo.mutation.SetUserID(u)
	return vsuo
}

// SetSessionID sets the "session" edge to the User entity by ID.
func (vsuo *VerificationSessionUpdateOne) SetSessionID(id uuid.UUID) *VerificationSessionUpdateOne {
	vsuo.mutation.SetSessionID(id)
	return vsuo
}

// SetSession sets the "session" edge to the User entity.
func (vsuo *VerificationSessionUpdateOne) SetSession(u *User) *VerificationSessionUpdateOne {
	return vsuo.SetSessionID(u.ID)
}

// Mutation returns the VerificationSessionMutation object of the builder.
func (vsuo *VerificationSessionUpdateOne) Mutation() *VerificationSessionMutation {
	return vsuo.mutation
}

// ClearSession clears the "session" edge to the User entity.
func (vsuo *VerificationSessionUpdateOne) ClearSession() *VerificationSessionUpdateOne {
	vsuo.mutation.ClearSession()
	return vsuo
}

// Where appends a list predicates to the VerificationSessionUpdate builder.
func (vsuo *VerificationSessionUpdateOne) Where(ps ...predicate.VerificationSession) *VerificationSessionUpdateOne {
	vsuo.mutation.Where(ps...)
	return vsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vsuo *VerificationSessionUpdateOne) Select(field string, fields ...string) *VerificationSessionUpdateOne {
	vsuo.fields = append([]string{field}, fields...)
	return vsuo
}

// Save executes the query and returns the updated VerificationSession entity.
func (vsuo *VerificationSessionUpdateOne) Save(ctx context.Context) (*VerificationSession, error) {
	return withHooks(ctx, vsuo.sqlSave, vsuo.mutation, vsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsuo *VerificationSessionUpdateOne) SaveX(ctx context.Context) *VerificationSession {
	node, err := vsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vsuo *VerificationSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := vsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsuo *VerificationSessionUpdateOne) ExecX(ctx context.Context) {
	if err := vsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsuo *VerificationSessionUpdateOne) check() error {
	if _, ok := vsuo.mutation.SessionID(); vsuo.mutation.SessionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VerificationSession.session"`)
	}
	return nil
}

func (vsuo *VerificationSessionUpdateOne) sqlSave(ctx context.Context) (_node *VerificationSession, err error) {
	if err := vsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(verificationsession.Table, verificationsession.Columns, sqlgraph.NewFieldSpec(verificationsession.FieldID, field.TypeString))
	id, ok := vsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VerificationSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, verificationsession.FieldID)
		for _, f := range fields {
			if !verificationsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != verificationsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vsuo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   verificationsession.SessionTable,
			Columns: []string{verificationsession.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vsuo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   verificationsession.SessionTable,
			Columns: []string{verificationsession.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VerificationSession{config: vsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verificationsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vsuo.mutation.done = true
	return _node, nil
}
