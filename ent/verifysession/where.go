// Code generated by ent, DO NOT EDIT.

package verifysession

import (
	"PluginServer/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldLTE(FieldID, id))
}

// Sid applies equality check predicate on the "sid" field. It's identical to SidEQ.
func Sid(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldEQ(FieldSid, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldEQ(FieldUserID, v))
}

// SidEQ applies the EQ predicate on the "sid" field.
func SidEQ(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldEQ(FieldSid, v))
}

// SidNEQ applies the NEQ predicate on the "sid" field.
func SidNEQ(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldNEQ(FieldSid, v))
}

// SidIn applies the In predicate on the "sid" field.
func SidIn(vs ...uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldIn(FieldSid, vs...))
}

// SidNotIn applies the NotIn predicate on the "sid" field.
func SidNotIn(vs ...uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldNotIn(FieldSid, vs...))
}

// SidGT applies the GT predicate on the "sid" field.
func SidGT(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldGT(FieldSid, v))
}

// SidGTE applies the GTE predicate on the "sid" field.
func SidGTE(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldGTE(FieldSid, v))
}

// SidLT applies the LT predicate on the "sid" field.
func SidLT(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldLT(FieldSid, v))
}

// SidLTE applies the LTE predicate on the "sid" field.
func SidLTE(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldLTE(FieldSid, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.VerifySession {
	return predicate.VerifySession(sql.FieldLTE(FieldUserID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VerifySession) predicate.VerifySession {
	return predicate.VerifySession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VerifySession) predicate.VerifySession {
	return predicate.VerifySession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VerifySession) predicate.VerifySession {
	return predicate.VerifySession(func(s *sql.Selector) {
		p(s.Not())
	})
}
