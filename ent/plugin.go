// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Encedeus/pluginServer/ent/plugin"
	"github.com/Encedeus/pluginServer/ent/source"
	"github.com/Encedeus/pluginServer/ent/user"
	"github.com/google/uuid"
)

// Plugin is the model entity for the Plugin schema.
type Plugin struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID uuid.UUID `json:"owner_id,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID int `json:"source_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PluginQuery when eager-loading is set.
	Edges        PluginEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PluginEdges holds the relations/edges for other nodes in the graph.
type PluginEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Source holds the value of the source edge.
	Source *Source `json:"source,omitempty"`
	// Publications holds the value of the publications edge.
	Publications []*Publication `json:"publications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PluginEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PluginEdges) SourceOrErr() (*Source, error) {
	if e.loadedTypes[1] {
		if e.Source == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: source.Label}
		}
		return e.Source, nil
	}
	return nil, &NotLoadedError{edge: "source"}
}

// PublicationsOrErr returns the Publications value or an error if the edge
// was not loaded in eager-loading.
func (e PluginEdges) PublicationsOrErr() ([]*Publication, error) {
	if e.loadedTypes[2] {
		return e.Publications, nil
	}
	return nil, &NotLoadedError{edge: "publications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plugin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plugin.FieldSourceID:
			values[i] = new(sql.NullInt64)
		case plugin.FieldName:
			values[i] = new(sql.NullString)
		case plugin.FieldID, plugin.FieldOwnerID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plugin fields.
func (pl *Plugin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plugin.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pl.ID = *value
			}
		case plugin.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case plugin.FieldOwnerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value != nil {
				pl.OwnerID = *value
			}
		case plugin.FieldSourceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_id", values[i])
			} else if value.Valid {
				pl.SourceID = int(value.Int64)
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Plugin.
// This includes values selected through modifiers, order, etc.
func (pl *Plugin) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Plugin entity.
func (pl *Plugin) QueryOwner() *UserQuery {
	return NewPluginClient(pl.config).QueryOwner(pl)
}

// QuerySource queries the "source" edge of the Plugin entity.
func (pl *Plugin) QuerySource() *SourceQuery {
	return NewPluginClient(pl.config).QuerySource(pl)
}

// QueryPublications queries the "publications" edge of the Plugin entity.
func (pl *Plugin) QueryPublications() *PublicationQuery {
	return NewPluginClient(pl.config).QueryPublications(pl)
}

// Update returns a builder for updating this Plugin.
// Note that you need to call Plugin.Unwrap() before calling this method if this Plugin
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plugin) Update() *PluginUpdateOne {
	return NewPluginClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Plugin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plugin) Unwrap() *Plugin {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plugin is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plugin) String() string {
	var builder strings.Builder
	builder.WriteString("Plugin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.OwnerID))
	builder.WriteString(", ")
	builder.WriteString("source_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.SourceID))
	builder.WriteByte(')')
	return builder.String()
}

// Plugins is a parsable slice of Plugin.
type Plugins []*Plugin
