// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PluginServer/ent/plugin"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Plugin is the model entity for the Plugin schema.
type Plugin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Repo holds the value of the "repo" field.
	Repo string `json:"repo,omitempty"`
	// Homepage holds the value of the "homepage" field.
	Homepage string `json:"homepage,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID uuid.UUID `json:"owner_id,omitempty"`
	// Contributors holds the value of the "contributors" field.
	Contributors []string `json:"contributors,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plugin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plugin.FieldContributors:
			values[i] = new([]byte)
		case plugin.FieldID:
			values[i] = new(sql.NullInt64)
		case plugin.FieldName, plugin.FieldDescription, plugin.FieldRepo, plugin.FieldHomepage:
			values[i] = new(sql.NullString)
		case plugin.FieldCreatedAt, plugin.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case plugin.FieldOwnerID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plugin fields.
func (pl *Plugin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plugin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int(value.Int64)
		case plugin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case plugin.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Time
			}
		case plugin.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case plugin.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pl.Description = value.String
			}
		case plugin.FieldRepo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repo", values[i])
			} else if value.Valid {
				pl.Repo = value.String
			}
		case plugin.FieldHomepage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field homepage", values[i])
			} else if value.Valid {
				pl.Homepage = value.String
			}
		case plugin.FieldOwnerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value != nil {
				pl.OwnerID = *value
			}
		case plugin.FieldContributors:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field contributors", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.Contributors); err != nil {
					return fmt.Errorf("unmarshal field contributors: %w", err)
				}
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Plugin.
// This includes values selected through modifiers, order, etc.
func (pl *Plugin) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// Update returns a builder for updating this Plugin.
// Note that you need to call Plugin.Unwrap() before calling this method if this Plugin
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plugin) Update() *PluginUpdateOne {
	return NewPluginClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Plugin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plugin) Unwrap() *Plugin {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plugin is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plugin) String() string {
	var builder strings.Builder
	builder.WriteString("Plugin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pl.Description)
	builder.WriteString(", ")
	builder.WriteString("repo=")
	builder.WriteString(pl.Repo)
	builder.WriteString(", ")
	builder.WriteString("homepage=")
	builder.WriteString(pl.Homepage)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.OwnerID))
	builder.WriteString(", ")
	builder.WriteString("contributors=")
	builder.WriteString(fmt.Sprintf("%v", pl.Contributors))
	builder.WriteByte(')')
	return builder.String()
}

// Plugins is a parsable slice of Plugin.
type Plugins []*Plugin
