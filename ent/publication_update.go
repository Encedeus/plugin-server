// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Encedeus/pluginServer/ent/plugin"
	"github.com/Encedeus/pluginServer/ent/predicate"
	"github.com/Encedeus/pluginServer/ent/publication"
	"github.com/google/uuid"
)

// PublicationUpdate is the builder for updating Publication entities.
type PublicationUpdate struct {
	config
	hooks    []Hook
	mutation *PublicationMutation
}

// Where appends a list predicates to the PublicationUpdate builder.
func (pu *PublicationUpdate) Where(ps ...predicate.Publication) *PublicationUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PublicationUpdate) SetCreatedAt(t time.Time) *PublicationUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableCreatedAt(t *time.Time) *PublicationUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetIsDeprecated sets the "is_deprecated" field.
func (pu *PublicationUpdate) SetIsDeprecated(b bool) *PublicationUpdate {
	pu.mutation.SetIsDeprecated(b)
	return pu
}

// SetNillableIsDeprecated sets the "is_deprecated" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableIsDeprecated(b *bool) *PublicationUpdate {
	if b != nil {
		pu.SetIsDeprecated(*b)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *PublicationUpdate) SetName(s string) *PublicationUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetTag sets the "tag" field.
func (pu *PublicationUpdate) SetTag(s string) *PublicationUpdate {
	pu.mutation.SetTag(s)
	return pu
}

// SetURIToFile sets the "uri_to_file" field.
func (pu *PublicationUpdate) SetURIToFile(s string) *PublicationUpdate {
	pu.mutation.SetURIToFile(s)
	return pu
}

// SetPluginID sets the "plugin_id" field.
func (pu *PublicationUpdate) SetPluginID(u uuid.UUID) *PublicationUpdate {
	pu.mutation.SetPluginID(u)
	return pu
}

// SetPlugin sets the "plugin" edge to the Plugin entity.
func (pu *PublicationUpdate) SetPlugin(p *Plugin) *PublicationUpdate {
	return pu.SetPluginID(p.ID)
}

// Mutation returns the PublicationMutation object of the builder.
func (pu *PublicationUpdate) Mutation() *PublicationMutation {
	return pu.mutation
}

// ClearPlugin clears the "plugin" edge to the Plugin entity.
func (pu *PublicationUpdate) ClearPlugin() *PublicationUpdate {
	pu.mutation.ClearPlugin()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PublicationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PublicationUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PublicationUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PublicationUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PublicationUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := publication.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Publication.name": %w`, err)}
		}
	}
	if _, ok := pu.mutation.PluginID(); pu.mutation.PluginCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Publication.plugin"`)
	}
	return nil
}

func (pu *PublicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(publication.Table, publication.Columns, sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(publication.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.IsDeprecated(); ok {
		_spec.SetField(publication.FieldIsDeprecated, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(publication.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Tag(); ok {
		_spec.SetField(publication.FieldTag, field.TypeString, value)
	}
	if value, ok := pu.mutation.URIToFile(); ok {
		_spec.SetField(publication.FieldURIToFile, field.TypeString, value)
	}
	if pu.mutation.PluginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publication.PluginTable,
			Columns: []string{publication.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plugin.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publication.PluginTable,
			Columns: []string{publication.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plugin.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PublicationUpdateOne is the builder for updating a single Publication entity.
type PublicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicationMutation
}

// SetCreatedAt sets the "created_at" field.
func (puo *PublicationUpdateOne) SetCreatedAt(t time.Time) *PublicationUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableCreatedAt(t *time.Time) *PublicationUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetIsDeprecated sets the "is_deprecated" field.
func (puo *PublicationUpdateOne) SetIsDeprecated(b bool) *PublicationUpdateOne {
	puo.mutation.SetIsDeprecated(b)
	return puo
}

// SetNillableIsDeprecated sets the "is_deprecated" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableIsDeprecated(b *bool) *PublicationUpdateOne {
	if b != nil {
		puo.SetIsDeprecated(*b)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *PublicationUpdateOne) SetName(s string) *PublicationUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetTag sets the "tag" field.
func (puo *PublicationUpdateOne) SetTag(s string) *PublicationUpdateOne {
	puo.mutation.SetTag(s)
	return puo
}

// SetURIToFile sets the "uri_to_file" field.
func (puo *PublicationUpdateOne) SetURIToFile(s string) *PublicationUpdateOne {
	puo.mutation.SetURIToFile(s)
	return puo
}

// SetPluginID sets the "plugin_id" field.
func (puo *PublicationUpdateOne) SetPluginID(u uuid.UUID) *PublicationUpdateOne {
	puo.mutation.SetPluginID(u)
	return puo
}

// SetPlugin sets the "plugin" edge to the Plugin entity.
func (puo *PublicationUpdateOne) SetPlugin(p *Plugin) *PublicationUpdateOne {
	return puo.SetPluginID(p.ID)
}

// Mutation returns the PublicationMutation object of the builder.
func (puo *PublicationUpdateOne) Mutation() *PublicationMutation {
	return puo.mutation
}

// ClearPlugin clears the "plugin" edge to the Plugin entity.
func (puo *PublicationUpdateOne) ClearPlugin() *PublicationUpdateOne {
	puo.mutation.ClearPlugin()
	return puo
}

// Where appends a list predicates to the PublicationUpdate builder.
func (puo *PublicationUpdateOne) Where(ps ...predicate.Publication) *PublicationUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PublicationUpdateOne) Select(field string, fields ...string) *PublicationUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Publication entity.
func (puo *PublicationUpdateOne) Save(ctx context.Context) (*Publication, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PublicationUpdateOne) SaveX(ctx context.Context) *Publication {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PublicationUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PublicationUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PublicationUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := publication.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Publication.name": %w`, err)}
		}
	}
	if _, ok := puo.mutation.PluginID(); puo.mutation.PluginCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Publication.plugin"`)
	}
	return nil
}

func (puo *PublicationUpdateOne) sqlSave(ctx context.Context) (_node *Publication, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(publication.Table, publication.Columns, sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Publication.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publication.FieldID)
		for _, f := range fields {
			if !publication.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publication.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(publication.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.IsDeprecated(); ok {
		_spec.SetField(publication.FieldIsDeprecated, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(publication.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Tag(); ok {
		_spec.SetField(publication.FieldTag, field.TypeString, value)
	}
	if value, ok := puo.mutation.URIToFile(); ok {
		_spec.SetField(publication.FieldURIToFile, field.TypeString, value)
	}
	if puo.mutation.PluginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publication.PluginTable,
			Columns: []string{publication.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plugin.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publication.PluginTable,
			Columns: []string{publication.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plugin.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Publication{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
